@page "/admin/crashes/edit/{id:long}"
@page "/admin/crashes/create"
@inherits OwningComponentBase<ICrashRepository>

<style>
    div.validation-message {color:rgb(220,55,70); font-weight:500}
</style>

<h3 class="bg-@ThemeColor text-white text-center p-1">@TitleText a Crash</h3>

<EditForm Model="c" OnValidSubmit="SaveCrash">

    <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="form-group">
            <label>Crash Id</label>
            <input class="form-control" disabled value="@c.CRASH_ID" />
        </div>


        <div class="form-group">
            <label>Date/Time</label>
            <ValidationMessage For="@(() => c.CRASH_DATETIME)"></ValidationMessage>
            <InputText class="form-control" @bind-Value="c.CRASH_DATETIME"></InputText>

        </div>

        <div class="form-group">
            <label>Crash Severity</label>
            <ValidationMessage For="@(() => c.CRASH_SEVERITY_ID)"></ValidationMessage>
            <InputNumber class="form-control" @bind-Value="c.CRASH_SEVERITY_ID"></InputNumber>

        </div>

        <button type="submit" class="btn btn-@ThemeColor">Save</button>
        <NavLink class="btn btn-secondary" href="/admin/crashes">Cancel</NavLink>

</EditForm>


@code {
    [Parameter]
    public long Id { get; set; } = 0;

    public string ThemeColor => Id == 0 ? "primary" : "warning";

    public string TitleText => Id == 0 ? "Create" : "Edit";

    public Crash c { get; set; } = new Crash(); //if one isn't passed, set up a new crash instance

    public ICrashRepository repo => Service;

    protected override void OnParametersSet()
    {
        if (Id != 0)
        {
            c = repo.Crashes.FirstOrDefault(x => x.CRASH_ID == Id);
        }
    }

    public void SaveCrash()
    {
        if (Id == 0)
        {
            repo.Add(c);
        }
        else
        {
            repo.Save(c);
        }

        NavManager.NavigateTo("/admin/crashes"); 
    }

    [Inject]
    public NavigationManager NavManager { get; set; }
}
